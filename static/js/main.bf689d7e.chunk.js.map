{"version":3,"sources":["components/HeaderComponent.js","utils/time.js","utils/words.js","components/TypingComponent.js","App.js","index.js"],"names":["HeaderComponent","id","href","React","Component","currentTime","Date","getTime","generateWords","n","Array","fill","map","_","faker","random","word","toLowerCase","join","TypingComponent","props","state","window","precision","previousText","nextText","currentChar","charAt","slice","errorText","wordCount","errors","keyPresses","startTime","wpm","accuracy","toFixed","handleKeyDown","bind","event","since","this","key","length","split","substring","setState","document","addEventListener","removeEventListener","className","Math","max","padStart","toString","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bf689d7e.chunk.js","sourcesContent":["import React from 'react';\nexport default class HeaderComponent extends React.Component {\n    render () {\n        return (\n            <div id=\"header\">\n                <a href=\"/\"><h3>clacking.club</h3></a>\n            </div>\n        );\n    }\n}","export const currentTime = () => new Date().getTime();\n\nexport const timeDelta = (since) => (currentTime() - since) / (60*1000);","import faker from 'faker/locale/en_GB';\n\nexport default function generateWords(n = 10) {\n    return new Array(n).fill(\"\").map(_ => faker.random.word().toLowerCase()).join(\" \");\n}\n","import React from 'react';\nimport {currentTime, timeDelta} from \"../utils/time.js\";\nimport generateWords from \"../utils/words.js\";\n\nexport default class TypingComponent extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {};\n\n        // How many characters to display to either side of the current char\n        this.window = 20;\n        // Decimal precision for accuracy\n        this.precision = 1;\n        \n        // Text that has been correctly typed\n        this.previousText = \"\";\n        // Upcoming text\n        this.nextText = generateWords(this.window * 2);\n        // The current character to be typed\n        this.currentChar = this.nextText.charAt(0);\n        this.nextText = this.nextText.slice(1);\n        // The current typos\n        this.errorText = \"\";\n\n        this.wordCount = 0;\n        this.errors = 0;\n        this.keyPresses = 0;\n        \n        this.startTime = null;\n        this.wpm = 0;\n        this.accuracy = (100).toFixed(this.precision);\n        \n        this.handleKeyDown = this.handleKeyDown.bind(this);\n    }\n\n\n\n\n    handleKeyDown(event) {\n        if (!this.startTime) {\n            this.startTime = currentTime();\n        }\n\n        this.keyPresses++;\n\n        if (event.key === this.currentChar && this.errorText.length == 0) {\n            if (this.nextText.charAt(0) == \" \") {\n                this.wordCount++;\n            }\n            this.previousText += this.currentChar;\n            this.currentChar = this.nextText.charAt(0);\n            this.nextText = this.nextText.slice(1);\n            if (this.nextText.split(\" \").length <= this.window) {\n                this.nextText += ' ' + generateWords(this.window);\n            }\n        } else {\n            if (event.key === \"Backspace\" || event.key === \"Delete\") {\n                this.errorText = this.errorText.substring(0, this.errorText.length - 1);\n            } else if (event.key.length == 1) {\n                this.errors++;\n                this.errorText += event.key;\n            }\n        }\n\n        this.wpm = (this.wordCount / timeDelta(this.startTime)).toFixed(0) || 0;\n        this.accuracy = ((1 - this.errors / this.keyPresses) * 100).toFixed(this.precision);\n        this.setState({});\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleKeyDown);\n    }\n    componentWillUnmount() {\n        document.removeEventListener(\"keydown\", this.handleKeyDown);\n    }\n    \n    render () {\n        return (\n            <div className=\"typing\">\n                <span id=\"previousText\">{this.previousText.substring(this.previousText.length-(Math.max(this.window - this.errorText.length, 0))).padStart((Math.max(this.window - this.errorText.length, 0)))}</span>\n                <span id=\"errorText\">{this.errorText.slice(-this.window)}</span>\n                <span id=\"currentChar\">{this.currentChar}</span>\n                <span id=\"nextText\">{this.nextText.substring(0, this.window)}</span>\n                <div id=\"stats\"><span id=\"wpm\">{this.wpm.toString().padStart(3) || 0} words/minute</span><span id=\"accuracy\">{this.accuracy} %</span></div>\n            </div>\n        );\n    }\n}","\nimport './App.css';\nimport HeaderComponent from './components/HeaderComponent';\nimport TypingComponent from \"./components/TypingComponent.js\";\n\nfunction App() {\n\n  return (\n    <div className=\"App unselectable\">\n      <HeaderComponent/>\n      <TypingComponent />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}